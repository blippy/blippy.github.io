<html><head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <LINK REL=StyleSheet HREF="../../style.css" TYPE="text/css">
  <title>Scheme</title></head>
<body>


<a href="../../index.html">Home</a> : <a href="../programming.htm">programming</a>

<h1>Scheme</h1>

<hr><h2><code>file-&gt;lines</code></h2>
<pre>
(define (file->lines filename)	
  (define (loop lines)
    (define line (read-line))
    (if (eof-object? line)
	(reverse lines)
	(loop (cons line lines))))
  (define (loop-0) (loop '()))
  (with-input-from-file filename loop-0))

</pre>



<hr><h2><code>define-syntax-rule</code></h2>

This is defined in Racket, but not by other schemes. I define it as follows:
<pre>
(define-syntax define-syntax-rule
  (syntax-rules ()
    [(define-syntax-rule (id arg ...) body)
     (define-syntax id
       (syntax-rules ()
	 [(id arg ...) body]))]))
</pre>

<hr><h2>Recipes</h2>

<h3>Convert string to code</h3>

<pre>
(with-input-from-string "(foo bar)" (lambda () (read)))
</pre>


<hr><h2>Links to other sites</h2>

<li><a href="http://rigaux.org/language-study/various/callcc/scheme.html">gotos</a> - simulating gotos in scheme using continuations - various methods</li>

<li><a href="https://www.youtube.com/watch?v=OyfBQmvr2Hc">Most Beuatiful Prgram Ever Written</a></li>

<li><a href="http://www.gnu.org/software/guile/manual/html_node/R6RS-I_002fO-Ports.html#R6RS-I_002fO-Ports">R6RS I/O Ports</a> - guile reference</li>

<li><a href="https://github.com/scheme-requests-for-implementation">SRFIs</a> - code!</li>

<li><a href="http://srfi.schemers.org/srfi-71/srfi-71.html">srfi-71</a> - Extended LET-syntax for multiple values. Let's you assign multiple values at once, and a few other tricks. Eg. <pre>(let ((a b (values 10 11))) b) ; 11</pre>



<hr><pre>
Author:  Mark Carter
Created: 21-Apr-2012
Updated: 14-Aug-2018
</small>
</body>
</html>
