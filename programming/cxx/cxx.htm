<html><head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <LINK REL=StyleSheet HREF="../../style.css" TYPE="text/css">
  <title>C++</title></head>
<body>


<a href="../../index.html">Home</a> : <a href="../programming.htm">programming</a>

<h1>C++ programming language</h1>

<hr><h2>Also on this site</h2>

<li><a href="compiler.htm">compiler</a> - compiler-secific notes</li>
<li><a href="decimal.htm">decimal</a></li>
<li><a href="documentation.htm">documentation</a> - references</li>
<li><a href="exceptions.htm">exceptions</a></li>
<li><a href="files.htm">files</a> - streams and file systems</li>
<li><a href="format.htm">format</a> - inc. boost::format</li>
<li><a href="iterators.htm">interators</a></li>
<li><a href="maths.htm">maths</a> - exceptions, rounding</li>
<li><a href="parsing.htm">parsing</a></li>
<li><a href="projects.htm">projects</a> -  list of projects in C++, which will be useful for identifying future hacking</li>
<li><a href="strings.htm">strings</a></li>
<li><a href="ui.htm">ui</a> - user interfaces</li>

<hr><h2>Gists</h2>

<li><a href="https://gist.github.com/blippy/dea1283e07d22ebef41e04ff3f9ecb5e">ctlbr.cc</a> - COBOL-style control breaks in C++</li>

<li><a href="https://gist.github.com/blippy/187b15228b85a694b6eb8eacb7c1ea08">rmdir.cc</a> - remove a directory recursively</li>

<li><a href="https://gist.github.com/blippy/ab735f9a2715db741503a29bccf1ddcb">run.cc</a> - execute a shell command, reading its output</li>

<li><a href="https://gist.github.com/blippy/5ec2509a0d6a7162050a8f935cee4c5a">simult.cc</a> - apply function concurrently on a vector of args</li>

<li><a href="https://gist.github.com/blippy/c3e57066bdb1717fb7baaa6e8ab95a6c">time.cc</a> - format date and time</li>

<li><a href="https://gist.github.com/blippy/69339dcac2e88fb6d8b581d98a5b855a">timer.cc</a> - time sections of code in nanoseconds</li>

<li><a href="https://gist.github.com/blippy/11159ef4d9b96cc350a156410bcb4fed">var.cc</a> - variant</li>





<hr><h2>Interesting libraries</h2>

<li><a href="https://danieldinu.com/posts/observable-c-expressions-using-the-observable-library/">observable</a> - reactive programming</li>

<li><a href="http://en.cppreference.com/w/cpp/io/manip/get_money">std::get_money()</a></li>
<li>std::variant</li>

<hr><h2>Unclassified</h2>

<p><b>Strong types</b>: you need phantom types (e.g. for a units library). <code>enum class</code>. Phantom types are also useful for guarantee that certain operations have been performed.
</p>

<hr><h2>Links to other sites</h2>

<h3>Stackoverflow/exchange</h3>

<ul>
	<li><a href="http://stackoverflow.com/questions/36283443/what-is-idomatic-modern-c-for-algebraic-data-types">algebraic data types</a> - see also <a href="https://akrzemi1.wordpress.com/2016/02/27/another-polymorphism/">Another polymorphism</a></li>
	<li><a href="https://stackoverflow.com/questions/1301056/looking-for-the-most-elegant-code-dispatcher">dispatch tables</a></li>
	<li><a href="http://stackoverflow.com/questions/1549184/something-like-print-end-end-in-c">here docs</a></li>
	<li><a href="http://stackoverflow.com/questions/37676152/how-do-i-know-if-im-using-copy-or-move">How do I know if I'm using copy or move?</a></li>
	<li><a href="http://stackoverflow.com/questions/36383525/is-there-a-more-idiomatic-way-of-replacing-a-pointer">pointer replacement</a></li>
	<li><a href="http://stackoverflow.com/questions/42180798/how-can-i-safely-extract-a-function-from-gnarly-c-code">refactoring</a> - using lambdas</li>
	<li><a href="http://stackoverflow.com/questions/39702794/can-i-create-attributed-types-in-c">template parameters</a></li>
	<li><a href="https://stackoverflow.com/questions/45509375/trouble-with-unordered-map-pair-index">trouble with unordered_map pair index</a></li>
	<li><a href="https://stackoverflow.com/questions/45009306/combining-using-and-reinterpret-cast">using and reinterpret_class</a></li>
</ul>

<h3>Unclassified</h3>

<ul>

	<li><a href="https://www.viva64.com/en/b/0533/">C++17</a></li>

	<li><a href="http://stackoverflow.com/questions/36308071/is-it-safe-to-point-to-a-calling-classess-constructors-resource">Is it safe to point to a calling classes's constructor's resource?</a></li>

	<li><a href="http://maitesin.github.io//Lambda_comparison/">lambda expressions</a></li>

	<li><a href="https://github.com/AnthonyCalandra/modern-cpp-features">modern-cpp-features</a></li>

	<li><a href="https://blog.demofox.org/2015/02/05/getting-strongly-typed-typedefs-using-phantom-types/">phantom types</a></li>

	<li><a href="https://bitpost.com/wiki/C%2B%2B_sorted_vector">sorted vector</a></li>

	<li><a href="http://lafstern.org/matt/col1.pdf">Why you shouldn't use set (and what you should use instead)</a></li>

	<li><a href="https://github.com/QuantStack/xtensor">xtensor</a> - multi-dimensional arrays for numrical analysis</li>
</ul>

<hr><pre>
Author:  Mark Carter
Created: 02-Mar-2016
Updated: 23-Aug-2018
</pre>
</body>
</html>
